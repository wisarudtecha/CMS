// src/components/ui/loading/LoadingSystem.tsx
/**
 * @fileoverview Code generated by Claude Sonnet 4 model.
 * 
 * @description
 * React TypeScript component for loading state & skeletons with functionality.
 * This will displaying loading state & skeletons in a clean format, and handling.
 * 
 * @metadata
 * Author: [Wisarud Techa]
 * First Created: [17-07-2025] v0.1.0
 * Last Updated: [17-07-2025] v0.1.0
 * 
 * @notes
 * - Auto-generated code; may contain incomplete logic or require validation.
 * - Modify with caution and document changes.
 * - Intended as a starting point or scaffolding.
 */

import React, { useState, useEffect } from "react";
import { AlertIcon, CheckCircleIcon } from "@/icons";
import {
  Loader2,
  // Clock,
  // Wifi,
  // WifiOff,
  // CheckCircle,
  // AlertCircle,
  // RefreshCw
} from "lucide-react";
import type { LoadingSpinnerProps, ProgressBarProps, SkeletonProps, ShimmerProps } from "@/types/loading";

// ==================== BASIC COMPONENTS ====================

// Loading Spinner Component
const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = "md", 
  className = "",
  color = "primary"
}) => {
  const sizeClasses = {
    sm: "w-4 h-4",
    md: "w-6 h-6",
    lg: "w-8 h-8",
    xl: "w-12 h-12"
  };

  const colorClasses = {
    primary: "text-blue-600",
    secondary: "text-gray-600",
    white: "text-white",
    gray: "text-gray-400"
  };

  return (
    <Loader2 
      className={`animate-spin ${sizeClasses[size]} ${colorClasses[color]} ${className}`}
    />
  );
};

// Progress Bar Component
const ProgressBar: React.FC<ProgressBarProps> = ({
  progress,
  size = "md",
  showPercentage = false,
  animated = true,
  color = "primary",
  className = ""
}) => {
  const sizeClasses = {
    sm: "h-1",
    md: "h-2",
    lg: "h-3"
  };

  const colorClasses = {
    primary: "bg-blue-600",
    secondary: "bg-gray-600",
    success: "bg-green-600",
    warning: "bg-yellow-600",
    error: "bg-red-600"
  };

  const clampedProgress = Math.min(100, Math.max(0, progress));

  return (
    <div className={`w-full ${className}`}>
      <div className={`bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden ${sizeClasses[size]}`}>
        <div
          className={`${colorClasses[color]} ${sizeClasses[size]} rounded-full transition-all duration-300 ease-out ${
            animated ? "transition-all" : ""
          }`}
          style={{ width: `${clampedProgress}%` }}
        />
      </div>
      {showPercentage && (
        <div className="text-sm text-gray-600 dark:text-gray-400 mt-1 text-center">
          {Math.round(clampedProgress)}%
        </div>
      )}
    </div>
  );
};

// Skeleton Component
const Skeleton: React.FC<SkeletonProps> = ({
  className = "",
  width,
  height,
  rounded = false,
  animate = true
}) => {
  const style: React.CSSProperties = {
    width: typeof width === "number" ? `${width}px` : width,
    height: typeof height === "number" ? `${height}px` : height,
  };

  return (
    <div
      className={`bg-gray-200 dark:bg-gray-700 ${
        rounded ? "rounded-full" : "rounded"
      } ${animate ? "animate-pulse" : ""} ${className}`}
      style={style}
    />
  );
};

// ==================== SKELETON PATTERNS ====================

// Table Skeleton
const TableSkeleton: React.FC<{ rows?: number; columns?: number }> = ({ 
  rows = 5, 
  columns = 4 
}) => (
  <div className="space-y-3">
    {/* Header */}
    <div className="grid gap-4" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>
      {Array.from({ length: columns }).map((_, i) => (
        <Skeleton key={i} height={20} />
      ))}
    </div>
    {/* Rows */}
    {Array.from({ length: rows }).map((_, rowIndex) => (
      <div key={rowIndex} className="grid gap-4" style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>
        {Array.from({ length: columns }).map((_, colIndex) => (
          <Skeleton key={colIndex} height={16} />
        ))}
      </div>
    ))}
  </div>
);

// Card Skeleton
const CardSkeleton: React.FC = () => (
  <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 space-y-3">
    <div className="flex items-center space-x-3">
      <Skeleton width={40} height={40} rounded />
      <div className="flex-1 space-y-2">
        <Skeleton height={16} width="60%" />
        <Skeleton height={12} width="40%" />
      </div>
    </div>
    <Skeleton height={12} />
    <Skeleton height={12} width="80%" />
    <div className="flex space-x-2 pt-2">
      <Skeleton height={32} width={80} />
      <Skeleton height={32} width={80} />
    </div>
  </div>
);

// Form Skeleton
const FormSkeleton: React.FC<{ fields?: number }> = ({ fields = 4 }) => (
  <div className="space-y-4">
    {Array.from({ length: fields }).map((_, i) => (
      <div key={i} className="space-y-2">
        <Skeleton height={16} width="25%" />
        <Skeleton height={40} />
      </div>
    ))}
    <div className="flex space-x-3 pt-4">
      <Skeleton height={40} width={100} />
      <Skeleton height={40} width={80} />
    </div>
  </div>
);

// Dashboard Widget Skeleton
const DashboardWidgetSkeleton: React.FC = () => (
  <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 space-y-4">
    <div className="flex items-center justify-between">
      <Skeleton height={20} width="40%" />
      <Skeleton width={24} height={24} />
    </div>
    <Skeleton height={60} />
    <div className="grid grid-cols-2 gap-4">
      <div className="text-center space-y-2">
        <Skeleton height={16} width="60%" className="mx-auto" />
        <Skeleton height={12} width="40%" className="mx-auto" />
      </div>
      <div className="text-center space-y-2">
        <Skeleton height={16} width="60%" className="mx-auto" />
        <Skeleton height={12} width="40%" className="mx-auto" />
      </div>
    </div>
  </div>
);

// ==================== SHIMMER EFFECT ====================

const Shimmer: React.FC<ShimmerProps> = ({ 
  children, 
  isLoading, 
  lines = 3, 
  className = "" 
}) => {
  if (!isLoading) {
    return <>{children}</>;
  }

  return (
    <div className={`space-y-3 ${className}`}>
      {Array.from({ length: lines }).map((_, i) => (
        <div key={i} className="relative overflow-hidden bg-gray-200 dark:bg-gray-700 rounded">
          <div 
            className="absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/60 to-transparent"
            style={{
              animation: "shimmer 2s infinite",
            }}
          />
          <Skeleton height={16} animate={false} />
        </div>
      ))}
    </div>
  );
};

// ==================== LOADING STATES ====================

// Page Loading State
const PageLoadingState: React.FC<{ message?: string }> = ({ 
  message = "Loading..." 
}) => (
  <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
    <div className="text-center space-y-4">
      <LoadingSpinner size="xl" />
      <div className="space-y-2">
        <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
          {message}
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Please wait while we load your content
        </p>
      </div>
    </div>
  </div>
);

// Component Loading Overlay
const LoadingOverlay: React.FC<{ 
  isLoading: boolean; 
  children: React.ReactNode;
  message?: string;
  transparent?: boolean;
}> = ({ 
  isLoading, 
  children, 
  message = "Loading...", 
  transparent = false 
}) => (
  <div className="relative">
    {children}
    {isLoading && (
      <div className={`absolute inset-0 flex items-center justify-center ${
        transparent 
          ? "bg-white/80 dark:bg-gray-900/80" 
          : "bg-white dark:bg-gray-900"
      } backdrop-blur-sm z-50 rounded-lg`}>
        <div className="text-center space-y-3">
          <LoadingSpinner size="lg" />
          <p className="text-sm text-gray-600 dark:text-gray-400">{message}</p>
        </div>
      </div>
    )}
  </div>
);

// ==================== SPECIALIZED LOADING STATES ====================

// Network Status Indicator
const NetworkStatus: React.FC = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showReconnecting, setShowReconnecting] = useState(false);

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      setShowReconnecting(false);
    };

    const handleOffline = () => {
      setIsOnline(false);
      setShowReconnecting(true);
    };

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  if (isOnline && !showReconnecting) return null;

  return (
    <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg ${
      isOnline 
        ? "bg-green-100 text-green-800 border border-green-200" 
        : "bg-red-100 text-red-800 border border-red-200"
    }`}>
      <div className="flex items-center space-x-2">
        {isOnline ? (
          <>
            {/* <Wifi className="w-4 h-4" /> */}
            <span className="text-sm font-medium">Connected</span>
          </>
        ) : (
          <>
            {/* <WifiOff className="w-4 h-4" /> */}
            <span className="text-sm font-medium">No connection</span>
          </>
        )}
      </div>
    </div>
  );
};

// File Upload Progress
const FileUploadProgress: React.FC<{
  files: Array<{ name: string; progress: number; status: "uploading" | "completed" | "error" }>;
}> = ({ files }) => (
  <div className="space-y-3">
    {files.map((file, index) => (
      <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-3">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center space-x-2">
            <div className="text-sm font-medium text-gray-900 dark:text-white truncate">
              {file.name}
            </div>
            {file.status === "completed" && (
              <CheckCircleIcon className="w-4 h-4 text-green-600" />
            )}
            {file.status === "error" && (
              <AlertIcon className="w-4 h-4 text-red-600" />
            )}
          </div>
          <div className="text-xs text-gray-500">
            {file.progress}%
          </div>
        </div>
        <ProgressBar 
          progress={file.progress} 
          size="sm" 
          color={file.status === "error" ? "error" : file.status === "completed" ? "success" : "primary"}
        />
      </div>
    ))}
  </div>
);

// ==================== MAIN DEMO COMPONENT ====================

const LoadingSystem: React.FC = () => {
  const [demoState, setDemoState] = useState({
    tableLoading: false,
    cardLoading: false,
    formLoading: false,
    pageLoading: false,
    uploadProgress: 0,
    showOverlay: false,
  });

  const [uploadFiles] = useState([
    { name: "document.pdf", progress: 75, status: "uploading" as const },
    { name: "image.jpg", progress: 100, status: "completed" as const },
    { name: "data.xlsx", progress: 45, status: "error" as const },
  ]);

  const simulateLoading = (key: keyof typeof demoState, duration = 3000) => {
    setDemoState(prev => ({ ...prev, [key]: true }));
    setTimeout(() => {
      setDemoState(prev => ({ ...prev, [key]: false }));
    }, duration);
  };

  // CSS for shimmer animation
  useEffect(() => {
    const style = document.createElement("style");
    style.textContent = `
      @keyframes shimmer {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
      }
    `;
    document.head.appendChild(style);
    // return () => document.head.removeChild(style);
    return () => { document.head.removeChild(style); };
  }, []);

  return (
    <>
      <div className="mx-auto space-y-8">
        
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            CMS Loading States & Skeletons System
          </h1>
          <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Comprehensive loading indicators, skeleton screens, and progress feedback 
            components for enhanced user experience during data loading states.
          </p>
        </div>

        {/* Network Status */}
        <NetworkStatus />

        {/* Control Panel */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            Loading State Controls
          </h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3">
            <button
              onClick={() => simulateLoading("tableLoading")}
              className="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm"
            >
              Table Loading
            </button>
            <button
              onClick={() => simulateLoading("cardLoading")}
              className="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors text-sm"
            >
              Card Loading
            </button>
            <button
              onClick={() => simulateLoading("formLoading")}
              className="px-3 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors text-sm"
            >
              Form Loading
            </button>
            <button
              onClick={() => simulateLoading("showOverlay", 2000)}
              className="px-3 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors text-sm"
            >
              Overlay
            </button>
            <button
              onClick={() => setDemoState(prev => ({ ...prev, uploadProgress: Math.min(100, prev.uploadProgress + 20) }))}
              className="px-3 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors text-sm"
            >
              Progress +20%
            </button>
            <button
              onClick={() => setDemoState(prev => ({ ...prev, uploadProgress: 0 }))}
              className="px-3 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors text-sm"
            >
              Reset Progress
            </button>
          </div>
        </div>

        {/* Spinner Variations */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            Loading Spinners
          </h2>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-6">
            {(["sm", "md", "lg", "xl"] as const).map(size => (
              <div key={size} className="text-center space-y-2">
                <LoadingSpinner size={size} />
                <p className="text-sm text-gray-600 dark:text-gray-400 capitalize">{size}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Progress Bars */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            Progress Indicators
          </h2>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
                Upload Progress
              </label>
              <ProgressBar 
                progress={demoState.uploadProgress} 
                showPercentage 
                size="lg"
                color="primary"
              />
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <ProgressBar progress={75} color="success" showPercentage />
              <ProgressBar progress={45} color="warning" showPercentage />
              <ProgressBar progress={20} color="error" showPercentage />
            </div>
          </div>
        </div>

        {/* Skeleton Patterns */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          
          {/* Table Skeleton */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
              Table Skeleton
            </h3>
            <LoadingOverlay isLoading={demoState.tableLoading} transparent>
              <TableSkeleton rows={4} columns={3} />
            </LoadingOverlay>
          </div>

          {/* Card Skeleton */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
              Card Skeleton
            </h3>
            <LoadingOverlay isLoading={demoState.cardLoading} transparent>
              <CardSkeleton />
            </LoadingOverlay>
          </div>

          {/* Form Skeleton */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
              Form Skeleton
            </h3>
            <LoadingOverlay isLoading={demoState.formLoading} transparent>
              <FormSkeleton fields={3} />
            </LoadingOverlay>
          </div>

          {/* Dashboard Widget Skeleton */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
              Dashboard Widget
            </h3>
            <DashboardWidgetSkeleton />
          </div>
        </div>

        {/* File Upload Progress */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            File Upload Progress
          </h2>
          <FileUploadProgress files={uploadFiles} />
        </div>

        {/* Shimmer Effect */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            Shimmer Effect
          </h2>
          <Shimmer isLoading={true} lines={4}>
            <p>This content would be shown when loaded</p>
          </Shimmer>
        </div>

        {/* Implementation Notes */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-900 dark:text-blue-100">
            Implementation Features
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800 dark:text-blue-200">
            <ul className="space-y-2">
              <li className="flex items-center space-x-2">
                {/* <Clock className="w-4 h-4" /> */}
                <span>Configurable loading durations</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <RefreshCw className="w-4 h-4" /> */}
                <span>Progressive loading with shimmer effects</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <CheckCircle className="w-4 h-4" /> */}
                <span>Optimistic UI updates</span>
              </li>
            </ul>
            <ul className="space-y-2">
              <li className="flex items-center space-x-2">
                {/* <Wifi className="w-4 h-4" /> */}
                <span>Network status indicators</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <LoadingSpinner size="sm" /> */}
                <span>Multiple skeleton patterns</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <ProgressBar progress={75} size="sm" className="w-16" /> */}
                <span>Real-time progress tracking</span>
              </li>
            </ul>
          </div>
        </div>

        {/* Global Loading Overlay Demo */}
        <LoadingOverlay 
          isLoading={demoState.showOverlay} 
          message="Processing your request..."
          transparent
        >
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
              Overlay Demo Area
            </h2>
            <p className="text-gray-600 dark:text-gray-400">
              Click "Overlay" button above to see the loading overlay in action.
              This demonstrates how content can be gracefully covered during loading states.
            </p>
          </div>
        </LoadingOverlay>
      </div>
    </>
  );
};

export default LoadingSystem;

// ==================== EXPORTS ====================

export {
  LoadingSpinner,
  ProgressBar,
  Skeleton,
  Shimmer,
  TableSkeleton,
  CardSkeleton,
  FormSkeleton,
  DashboardWidgetSkeleton,
  PageLoadingState,
  LoadingOverlay,
  NetworkStatus,
  FileUploadProgress
};

/**
 * @keyFeatures
 * ----------------------------------------------------------------------------
 * - Loading Components.
 * - Skeleton Patterns.
 * - Advanced Features.
 * - Interactive Demo.
 * 
 * @version 0.1.0
 * @date    17-07-2025
 * ----------------------------------------------------------------------------
 */
