// src/components/security/ErrorBoundary.tsx
/**
 * @fileoverview Code generated by Claude Sonnet 4 model.
 * 
 * @description
 * React TypeScript component for comprehensive error boundaries with functionality.
 * This will displaying comprehensive error boundaries in a clean format, and handling.
 * 
 * @metadata
 * Author: [Wisarud Techa]
 * First Created: [17-07-2025] v0.1.0
 * Last Updated: [17-07-2025] v0.1.0
 * 
 * @notes
 * - Auto-generated code; may contain incomplete logic or require validation.
 * - Modify with caution and document changes.
 * - Intended as a starting point or scaffolding.
 */

import React, { Component, ErrorInfo } from "react";
// import { AlertTriangle, RefreshCw, Home, Bug, Copy, CheckCircle } from "lucide-react";
import type { Props, State } from "@/types/error-boundary";
import { DefaultErrorFallback } from "@/components/security/DefaultErrorFallback";
import { ErrorReportingService } from "@/components/security/withErrorBoundary";
import { InlineErrorFallback } from "@/components/security/InlineErrorFallback";
import Button from "@/components/ui/button/Button";

class ErrorBoundary extends Component<Props, State> {
  private retryTimeoutId: number | null = null;

  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      errorId: "",
      retryCount: 0,
      copied: false
    };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    const errorId = `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    return {
      hasError: true,
      error,
      errorId
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({ errorInfo });

    // Report error to monitoring service
    ErrorReportingService.reportError(error, errorInfo, this.state.errorId);

    // Call custom error handler if provided
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  componentWillUnmount() {
    if (this.retryTimeoutId) {
      clearTimeout(this.retryTimeoutId);
    }
  }

  resetError = () => {
    const newRetryCount = this.state.retryCount + 1;
    
    // Implement exponential backoff for automatic retries
    if (newRetryCount <= 3) {
      this.setState({
        hasError: false,
        error: null,
        errorInfo: null,
        errorId: "",
        retryCount: newRetryCount,
        copied: false
      });

      // Auto-retry with backoff if error persists
      this.retryTimeoutId = window.setTimeout(() => {
        if (this.state.hasError && newRetryCount < 3) {
          this.resetError();
        }
      }, Math.pow(2, newRetryCount) * 1000);
    } else {
      // Max retries reached, just reset state
      this.setState({
        hasError: false,
        error: null,
        errorInfo: null,
        errorId: "",
        retryCount: newRetryCount,
        copied: false
      });
    }
  };

  render() {
    if (this.state.hasError && this.state.error && this.state.errorInfo) {
      const FallbackComponent = this.props.fallbackComponent || 
        (this.props.isolate ? InlineErrorFallback : DefaultErrorFallback);

      return (
        <FallbackComponent
          error={this.state.error}
          errorInfo={this.state.errorInfo}
          resetError={this.resetError}
          errorId={this.state.errorId}
          retryCount={this.state.retryCount}
        />
      );
    }

    return this.props.children;
  }
}

// Demo component that can trigger errors for testing
const ErrorTrigger: React.FC = () => {
  const [shouldError, setShouldError] = React.useState(false);

  if (shouldError) {
    throw new Error("This is a demo error for testing the error boundary");
  }

  return (
    <div className="p-6 bg-gray-100 dark:bg-gray-800 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Error Boundary Demo</h2>
      <p className="text-gray-600 dark:text-gray-300 mb-4">
        This component demonstrates how the error boundary catches and handles errors gracefully.
      </p>
      
      <div className="space-y-4">
        <Button
          onClick={() => setShouldError(true)}
          variant="error"
        >
          Trigger Error
        </Button>
        
        <ErrorBoundary isolate fallbackComponent={InlineErrorFallback}>
          <div className="bg-blue-100 p-4 rounded">
            <h3 className="font-medium text-blue-900">Isolated Component</h3>
            <p className="text-blue-700 mb-2">This has its own error boundary</p>
            <Button
              onClick={() => {
                throw new Error("Isolated component error");
              }}
              variant="primary"
              size="xs"
            >
              Trigger Isolated Error
            </Button>
          </div>
        </ErrorBoundary>
      </div>
    </div>
  );
};

// Main demo app showing different error boundary configurations
const App: React.FC = () => {
  return (
    <>
      <div className="mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-8">
          CMS Error Boundary System
        </h1>
        
        <div className="grid gap-6 mb-8">
          <div className="bg-gray-100 dark:bg-gray-800 p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Features Demonstrated</h2>
            <ul className="space-y-2 text-gray-700 dark:text-gray-200">
              <li className="flex items-center space-x-2">
                {/* <Bug className="h-4 w-4 text-green-600" /> */}
                <span>Graceful error recovery with retry mechanism</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <AlertTriangle className="h-4 w-4 text-orange-600" /> */}
                <span>User-friendly error messages</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <RefreshCw className="h-4 w-4 text-blue-600" /> */}
                <span>Automatic error reporting to monitoring service</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <Copy className="h-4 w-4 text-purple-600" /> */}
                <span>Error details copying for support</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <Home className="h-4 w-4 text-gray-600" /> */}
                <span>Isolated error boundaries for component-level errors</span>
              </li>
            </ul>
          </div>
        </div>

        {/* Full-page error boundary */}
        <ErrorBoundary>
          <ErrorTrigger />
        </ErrorBoundary>
        
        <div className="mt-8 bg-gray-100 dark:bg-gray-800 p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Implementation Notes</h2>
          <div className="prose prose-sm text-gray-700 dark:text-gray-200">
            <p>
              This error boundary system provides comprehensive error handling for the CMS:
            </p>
            <ul>
              <li><strong>Error Recovery:</strong> Automatic retry with exponential backoff</li>
              <li><strong>Error Reporting:</strong> Integration with monitoring services</li>
              <li><strong>User Experience:</strong> Graceful degradation with helpful actions</li>
              <li><strong>Developer Tools:</strong> Detailed error information and copying</li>
              <li><strong>Flexibility:</strong> Both full-page and inline error boundaries</li>
            </ul>
          </div>
        </div>
      </div>
    </>
  );
};

export default App;

/**
 * @keyFeatures
 * ----------------------------------------------------------------------------
 * - Comprehensive Error Boundaries.
 * - Error Reporting & Monitoring.
 * - User-Friendly Experience.
 * - Developer Features.
 * 
 * @version 0.1.0
 * @date    17-07-2025
 * ----------------------------------------------------------------------------
 */
