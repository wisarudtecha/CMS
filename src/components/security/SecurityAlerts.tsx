// src/components/security/SecurityAlerts.tsx
/**
 * @fileoverview Code generated by Claude Sonnet 4 model.
 * 
 * @description
 * React TypeScript component for security alert components with functionality.
 * This will displaying security alert components in a clean format, and handling.
 * 
 * @metadata
 * Author: [Wisarud Techa]
 * First Created: [17-07-2025] v0.1.0
 * Last Updated: [17-07-2025] v0.1.0
 * 
 * @notes
 * - Auto-generated code; may contain incomplete logic or require validation.
 * - Modify with caution and document changes.
 * - Intended as a starting point or scaffolding.
 */

import React, { useState, useEffect, useCallback } from "react";
import { 
  // Shield, 
  // AlertTriangle, 
  // Lock, 
  // Eye, 
  // EyeOff, 
  // Clock, 
  // MapPin, 
  // Smartphone, 
  // Monitor, 
  // X, 
  // CheckCircle, 
  // XCircle, 
  // Info, 
  // Bell,
  // Key,
  // User,
  // Settings,
  // Globe,
  // Calendar,
  // Activity
} from "lucide-react";
import {
  // AlertHexaIcon,
  // LockIcon,
  // EyeIcon,
  // EyeCloseIcon,
  // TimeIcon,
  CloseIcon,
  CheckLineIcon,
  // InfoIcon,
  // UserIcon,
  // PencilIcon,
  CalenderIcon,
  TimeIcon
} from "@/icons"
import type { SecurityAlert, LoginAttempt, DeviceInfo } from "@/types/security-alert";

// ==================== MOCK DATA ====================

const mockLoginAttempts: LoginAttempt[] = [
  {
    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago
    location: "Bangkok, Thailand",
    device: "Chrome on Windows",
    ip: "203.154.83.45",
    success: true,
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
  },
  {
    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago
    location: "Unknown Location",
    device: "Firefox on Linux",
    ip: "192.168.1.100",
    success: false,
    userAgent: "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0"
  },
  {
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago
    location: "Bangkok, Thailand",
    device: "Safari on iPhone",
    ip: "203.154.83.45",
    success: true,
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X)"
  }
];

const mockDevices: DeviceInfo[] = [
  {
    id: "device-1",
    name: "Work Laptop",
    type: "desktop",
    os: "Windows 11",
    browser: "Chrome 120",
    lastSeen: new Date(),
    trusted: true
  },
  {
    id: "device-2",
    name: "iPhone 14",
    type: "mobile",
    os: "iOS 17",
    browser: "Safari",
    lastSeen: new Date(Date.now() - 1000 * 60 * 60 * 2),
    trusted: true
  },
  {
    id: "device-3",
    name: "Unknown Device",
    type: "desktop",
    os: "Linux",
    browser: "Firefox 120",
    lastSeen: new Date(Date.now() - 1000 * 60 * 30),
    trusted: false
  }
];

// ==================== UTILITY FUNCTIONS ====================

const generateSecurityAlerts = (): SecurityAlert[] => [
  {
    id: "alert-1",
    type: "login",
    severity: "high",
    title: "Suspicious Login Attempt",
    message: "Someone tried to access your account from an unrecognized device in Unknown Location.",
    timestamp: new Date(Date.now() - 1000 * 60 * 30),
    details: {
      location: "Unknown Location",
      device: "Firefox on Linux",
      ip: "192.168.1.100",
      blocked: true
    },
    actions: [
      {
        id: "secure-account",
        label: "Secure Account",
        type: "primary",
        handler: () => console.log("Securing account...")
      },
      {
        id: "review-devices",
        label: "Review Devices",
        type: "secondary",
        handler: () => console.log("Opening device review...")
      }
    ]
  },
  {
    id: "alert-2",
    type: "password",
    severity: "medium",
    title: "Password Expiry Warning",
    message: "Your password will expire in 7 days. Please update it to maintain account security.",
    timestamp: new Date(Date.now() - 1000 * 60 * 60),
    details: {
      daysRemaining: 7,
      lastChanged: new Date(Date.now() - 1000 * 60 * 60 * 24 * 83) // 83 days ago
    },
    actions: [
      {
        id: "change-password",
        label: "Change Password",
        type: "primary",
        handler: () => console.log("Opening password change...")
      },
      {
        id: "remind-later",
        label: "Remind Later",
        type: "secondary",
        handler: () => console.log("Setting reminder...")
      }
    ]
  },
  {
    id: "alert-3",
    type: "permission",
    severity: "medium",
    title: "Role Permissions Updated",
    message: "Your account permissions have been modified by an administrator.",
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),
    details: {
      changedBy: "Admin User",
      permissions: {
        added: ["user_management"],
        removed: ["system_admin"]
      }
    },
    actions: [
      {
        id: "view-permissions",
        label: "View Details",
        type: "primary",
        handler: () => console.log("Viewing permission details...")
      }
    ]
  },
  {
    id: "alert-4",
    type: "session",
    severity: "low",
    title: "Session Extended",
    message: "Your session has been automatically extended due to continued activity.",
    timestamp: new Date(Date.now() - 1000 * 60 * 15),
    autoClose: 5000,
    details: {
      originalExpiry: new Date(Date.now() + 1000 * 60 * 45),
      newExpiry: new Date(Date.now() + 1000 * 60 * 60)
    }
  }
];

// ==================== COMPONENTS ====================

// Security Alert Icon Component
// const SecurityAlertIcon: React.FC<{ type: SecurityAlert["type"]; severity: SecurityAlert["severity"] }> = ({ 
//   type, 
//   severity 
// }) => {
//   const getIcon = () => {
//     switch (type) {
//       case "login": return Shield;
//       case "password": return Key;
//       case "lockout": return LockIcon;
//       case "permission": return UserIcon;
//       case "device": return Monitor;
//       case "location": return MapPin;
//       case "breach": return AlertHexaIcon;
//       case "session": return TimeIcon;
//       default: return Shield;
//     }
//   };

//   const getColorClass = () => {
//     switch (severity) {
//       case "critical": return "text-red-600 bg-red-100";
//       case "high": return "text-orange-600 bg-orange-100";
//       case "medium": return "text-yellow-600 bg-yellow-100";
//       case "low": return "text-blue-600 bg-blue-100";
//       default: return "text-gray-600 bg-gray-100";
//     }
//   };

//   const Icon = getIcon();
  
//   return (
//     <div className={`p-2 rounded-full ${getColorClass()}`}>
//       <Icon className="w-5 h-5" />
//     </div>
//   );
// };

// Individual Security Alert Component
const SecurityAlertCard: React.FC<{
  alert: SecurityAlert;
  onDismiss?: (id: string) => void;
  onAcknowledge?: (id: string) => void;
}> = ({ alert, onDismiss, onAcknowledge }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [timeAgo, setTimeAgo] = useState("");

  // Update time ago periodically
  useEffect(() => {
    const updateTimeAgo = () => {
      const now = new Date();
      const diff = now.getTime() - alert.timestamp.getTime();
      const minutes = Math.floor(diff / (1000 * 60));
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));

      if (days > 0) {
        setTimeAgo(`${days}d ago`);
      } else if (hours > 0) {
        setTimeAgo(`${hours}h ago`);
      } else {
        setTimeAgo(`${minutes}m ago`);
      }
    };

    updateTimeAgo();
    const interval = setInterval(updateTimeAgo, 60000); // Update every minute

    return () => clearInterval(interval);
  }, [alert.timestamp]);

  const getSeverityBorderClass = () => {
    switch (alert.severity) {
      case "critical": return "border-l-red-500";
      case "high": return "border-l-orange-500";
      case "medium": return "border-l-yellow-500";
      case "low": return "border-l-blue-500";
      default: return "border-l-gray-500";
    }
  };

  return (
    <div className={`bg-white dark:bg-gray-800 border-l-4 ${getSeverityBorderClass()} border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm`}>
      <div className="p-4">
        <div className="flex items-start space-x-3">
          {/* <SecurityAlertIcon type={alert.type} severity={alert.severity} /> */}
          
          <div className="flex-1 min-w-0">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-semibold text-gray-900 dark:text-white">
                {alert.title}
              </h3>
              <div className="flex items-center space-x-2">
                <span className="text-xs text-gray-500 dark:text-gray-400">
                  {timeAgo}
                </span>
                {onDismiss && (
                  <button
                    onClick={() => onDismiss(alert.id)}
                    className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                  >
                    <CloseIcon className="w-4 h-4" />
                  </button>
                )}
              </div>
            </div>
            
            <p className="text-sm text-gray-700 dark:text-gray-300 mt-1">
              {alert.message}
            </p>

            {/* Alert Details */}
            {alert.details && (
              <div className="mt-2">
                <button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
                >
                  {isExpanded ? "Hide Details" : "Show Details"}
                </button>
                
                {isExpanded && (
                  <div className="mt-2 p-3 bg-gray-50 dark:bg-gray-700 rounded border text-xs">
                    <pre className="whitespace-pre-wrap text-gray-600 dark:text-gray-300">
                      {JSON.stringify(alert.details, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            )}

            {/* Actions */}
            {alert.actions && alert.actions.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-3">
                {alert.actions.map((action) => (
                  <button
                    key={action.id}
                    onClick={action.handler}
                    className={`px-3 py-1 text-xs font-medium rounded transition-colors ${
                      action.type === "primary"
                        ? "bg-blue-600 text-white hover:bg-blue-700"
                        : action.type === "danger"
                        ? "bg-red-600 text-white hover:bg-red-700"
                        : "bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500"
                    }`}
                  >
                    {action.label}
                  </button>
                ))}
              </div>
            )}

            {/* Acknowledgment */}
            {onAcknowledge && !alert.acknowledged && (
              <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
                <button
                  onClick={() => onAcknowledge(alert.id)}
                  className="text-xs text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300 flex items-center space-x-1"
                >
                  <CheckLineIcon className="w-3 h-3" />
                  <span>Mark as Acknowledged</span>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Security Dashboard Component
const SecurityDashboard: React.FC = () => {
  const [recentAttempts] = useState(mockLoginAttempts);
  const [devices] = useState(mockDevices);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      
      {/* Recent Login Attempts */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center space-x-2">
          <TimeIcon className="w-5 h-5" />
          <span>Recent Login Attempts</span>
        </h3>
        
        <div className="space-y-3">
          {recentAttempts.map((attempt, index) => (
            <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded">
              <div className={`p-1 rounded-full ${
                attempt.success 
                  ? "bg-green-100 text-green-600" 
                  : "bg-red-100 text-red-600"
              }`}>
                {attempt.success ? (
                  <CheckLineIcon className="w-4 h-4" />
                ) : (
                  <CloseIcon className="w-4 h-4" />
                )}
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">
                    {attempt.device}
                  </p>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {attempt.timestamp.toLocaleTimeString()}
                  </span>
                </div>
                <div className="flex items-center space-x-4 text-xs text-gray-600 dark:text-gray-400">
                  <span className="flex items-center space-x-1">
                    {/* <MapPin className="w-3 h-3" /> */}
                    <span>{attempt.location}</span>
                  </span>
                  <span className="flex items-center space-x-1">
                    {/* <Globe className="w-3 h-3" /> */}
                    <span>{attempt.ip}</span>
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Trusted Devices */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center space-x-2">
          {/* <Monitor className="w-5 h-5" /> */}
          <span>Trusted Devices</span>
        </h3>
        
        <div className="space-y-3">
          {devices.map((device) => (
            <div key={device.id} className="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded">
              {/*
              <div className={`p-1 rounded-full ${
                device.trusted 
                  ? "bg-green-100 text-green-600" 
                  : "bg-orange-100 text-orange-600"
              }`}>
                {device.type === "mobile" ? (
                  <Smartphone className="w-4 h-4" />
                ) : (
                  <Monitor className="w-4 h-4" />
                )}
              </div>
              */}
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between">
                  <p className="text-sm font-medium text-gray-900 dark:text-white">
                    {device.name}
                  </p>
                  <span className={`text-xs px-2 py-1 rounded-full ${
                    device.trusted 
                      ? "bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100" 
                      : "bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100"
                  }`}>
                    {device.trusted ? "Trusted" : "Unverified"}
                  </span>
                </div>
                <div className="flex items-center space-x-4 text-xs text-gray-600 dark:text-gray-400">
                  <span>{device.os}</span>
                  <span>{device.browser}</span>
                  <span className="flex items-center space-x-1">
                    <CalenderIcon className="w-3 h-3" />
                    <span>Last seen {device.lastSeen.toLocaleDateString()}</span>
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Security Notification Center
const SecurityNotificationCenter: React.FC<{
  alerts: SecurityAlert[];
  onDismiss: (id: string) => void;
  onAcknowledge: (id: string) => void;
  onClearAll: () => void;
}> = ({ alerts, onDismiss, onAcknowledge, onClearAll }) => {
  const [filter, setFilter] = useState<"all" | "unacknowledged" | "critical">("all");

  const filteredAlerts = alerts.filter(alert => {
    switch (filter) {
      case "unacknowledged":
        return !alert.acknowledged;
      case "critical":
        return alert.severity === "critical" || alert.severity === "high";
      default:
        return true;
    }
  });

  const unacknowledgedCount = alerts.filter(alert => !alert.acknowledged).length;
  const criticalCount = alerts.filter(alert => alert.severity === "critical" || alert.severity === "high").length;

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            {/* <Bell className="w-5 h-5" /> */}
            <span>Security Notifications</span>
            {unacknowledgedCount > 0 && (
              <span className="bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100 text-xs font-medium px-2 py-1 rounded-full">
                {unacknowledgedCount}
              </span>
            )}
          </h2>
          
          {alerts.length > 0 && (
            <button
              onClick={onClearAll}
              className="text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
            >
              Clear All
            </button>
          )}
        </div>

        {/* Filter Tabs */}
        <div className="flex space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
          <button
            onClick={() => setFilter("all")}
            className={`px-3 py-1 text-sm font-medium rounded transition-colors ${
              filter === "all"
                ? "bg-white dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm"
                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
            }`}
          >
            All ({alerts.length})
          </button>
          <button
            onClick={() => setFilter("unacknowledged")}
            className={`px-3 py-1 text-sm font-medium rounded transition-colors ${
              filter === "unacknowledged"
                ? "bg-white dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm"
                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
            }`}
          >
            Unread ({unacknowledgedCount})
          </button>
          <button
            onClick={() => setFilter("critical")}
            className={`px-3 py-1 text-sm font-medium rounded transition-colors ${
              filter === "critical"
                ? "bg-white dark:bg-gray-800 text-gray-900 dark:text-white shadow-sm"
                : "text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
            }`}
          >
            Critical ({criticalCount})
          </button>
        </div>
      </div>

      <div className="p-6">
        {filteredAlerts.length === 0 ? (
          <div className="text-center py-8">
            {/* <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" /> */}
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
              No Security Alerts
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              Your account security looks good. We"ll notify you of any suspicious activity.
            </p>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredAlerts.map((alert) => (
              <SecurityAlertCard
                key={alert.id}
                alert={alert}
                onDismiss={onDismiss}
                onAcknowledge={onAcknowledge}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// ==================== MAIN DEMO COMPONENT ====================

const SecurityAlerts: React.FC = () => {
  const [alerts, setAlerts] = useState<SecurityAlert[]>(generateSecurityAlerts());
  const [showTestControls, setShowTestControls] = useState(false);

  // Auto-close alerts with autoClose property
  useEffect(() => {
    const timers: NodeJS.Timeout[] = [];

    alerts.forEach(alert => {
      if (alert.autoClose && !alert.acknowledged) {
        const timer = setTimeout(() => {
          handleDismissAlert(alert.id);
        }, alert.autoClose);
        timers.push(timer);
      }
    });

    return () => {
      timers.forEach(timer => clearTimeout(timer));
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [alerts]);

  const handleDismissAlert = useCallback((id: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== id));
  }, []);

  const handleAcknowledgeAlert = useCallback((id: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === id ? { ...alert, acknowledged: true } : alert
    ));
  }, []);

  const handleClearAllAlerts = useCallback(() => {
    setAlerts([]);
  }, []);

  const generateTestAlert = (type: SecurityAlert["type"]) => {
    const testAlerts: Record<SecurityAlert["type"], Omit<SecurityAlert, "id" | "timestamp">> = {
      login: {
        type: "login",
        severity: "high",
        title: "New Login Detected",
        message: "Someone logged into your account from a new device.",
        details: { location: "Tokyo, Japan", device: "Chrome on macOS" },
        actions: [
          {
            id: "secure",
            label: "Secure Account",
            type: "primary",
            handler: () => console.log("Securing account...")
          }
        ]
      },
      password: {
        type: "password",
        severity: "medium",
        title: "Password Expires Soon",
        message: "Your password will expire in 3 days.",
        details: { daysRemaining: 3 },
        actions: [
          {
            id: "change",
            label: "Change Now",
            type: "primary",
            handler: () => console.log("Changing password...")
          }
        ]
      },
      lockout: {
        type: "lockout",
        severity: "critical",
        title: "Account Locked",
        message: "Your account has been locked due to multiple failed login attempts.",
        details: { attempts: 5, lockoutTime: "30 minutes" },
        actions: [
          {
            id: "unlock",
            label: "Request Unlock",
            type: "primary",
            handler: () => console.log("Requesting unlock...")
          }
        ]
      },
      permission: {
        type: "permission",
        severity: "medium",
        title: "Permissions Changed",
        message: "Your account permissions have been updated.",
        details: { changedBy: "System Admin" }
      },
      device: {
        type: "device",
        severity: "low",
        title: "New Device Added",
        message: "A new trusted device has been added to your account.",
        details: { device: "iPad Pro" }
      },
      location: {
        type: "location",
        severity: "medium",
        title: "Unusual Location",
        message: "Login detected from an unusual location.",
        details: { location: "Mumbai, India" }
      },
      breach: {
        type: "breach",
        severity: "critical",
        title: "Security Breach Detected",
        message: "Suspicious activity detected on your account.",
        details: { threat: "Potential data access attempt" }
      },
      session: {
        type: "session",
        severity: "low",
        title: "Session Updated",
        message: "Your session has been refreshed.",
        autoClose: 3000
      }
    };

    const newAlert: SecurityAlert = {
      id: `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      ...testAlerts[type]
    };

    setAlerts(prev => [newAlert, ...prev]);
  };

  return (
    <>
      <div className="mx-auto space-y-8">
        
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            CMS Security Alert Components System
          </h1>
          <p className="text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
            Comprehensive security notification system with real-time alerts for suspicious activities, 
            password management, account changes, and system security events.
          </p>
        </div>

        {/* Test Controls */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
              Security Alert Testing
            </h2>
            <button
              onClick={() => setShowTestControls(!showTestControls)}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              {showTestControls ? "Hide" : "Show"} Test Controls
            </button>
          </div>
          
          {showTestControls && (
            <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-8 gap-3">
              {(["login", "password", "lockout", "permission", "device", "location", "breach", "session"] as const).map(type => (
                <button
                  key={type}
                  onClick={() => generateTestAlert(type)}
                  className="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors text-sm capitalize"
                >
                  {type}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Security Notification Center */}
        <SecurityNotificationCenter
          alerts={alerts}
          onDismiss={handleDismissAlert}
          onAcknowledge={handleAcknowledgeAlert}
          onClearAll={handleClearAllAlerts}
        />

        {/* Security Dashboard */}
        <SecurityDashboard />

        {/* Implementation Notes */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-900 dark:text-blue-100">
            Security Features Implemented
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800 dark:text-blue-200">
            <ul className="space-y-2">
              <li className="flex items-center space-x-2">
                {/* <Shield className="w-4 h-4" /> */}
                <span>Suspicious login attempt detection</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <Key className="w-4 h-4" /> */}
                <span>Password expiry warnings</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <LockIcon className="w-4 h-4" /> */}
                <span>Account lockout notifications</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <UserIcon className="w-4 h-4" /> */}
                <span>Permission change alerts</span>
              </li>
            </ul>
            <ul className="space-y-2">
              <li className="flex items-center space-x-2">
                {/* <Monitor className="w-4 h-4" /> */}
                <span>Device management and trust levels</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <MapPin className="w-4 h-4" /> */}
                <span>Location-based security monitoring</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <Bell className="w-4 h-4" /> */}
                <span>Real-time security notifications</span>
              </li>
              <li className="flex items-center space-x-2">
                {/* <Activity className="w-4 h-4" /> */}
                <span>Login attempt tracking and analysis</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </>
  );
};

export default SecurityAlerts;

// ==================== EXPORTS ====================

export {
  SecurityAlertCard,
  SecurityNotificationCenter,
  SecurityDashboard,
  // SecurityAlertIcon
};

/**
 * @keyFeatures
 * ----------------------------------------------------------------------------
 * - Core Security Alerts.
 * - Advanced Notification Features.
 * - Security Dashboard.
 * - Interactive Controls.
 * 
 * @version 0.1.0
 * @date    17-07-2025
 * ----------------------------------------------------------------------------
 */
